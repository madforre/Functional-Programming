함수형 프로그래밍

    함수형 프로그래밍은 성공적인 프로그래밍을 위해 부수 효과를 미워하고
    조합성을 강조하는 프로그래밍 패러다임이다.

    * 부수효과를 미워한다. => 순수 함수를 만든다.
    * 조합성을 강조한다. => 모듈화 수준을 높인다.
    * 순수 함수 => 오류를 줄이고 안정성을 높인다.
    * 모듈화 수준이 높다.=> 생산성을 높인다. 
      (사용성, 성능, 확장성, 기회 변경에 대한 대응력이 좋다.)

    함수가 리턴 값으로 결과를 만드는 것 외에 외부 상태에 영향을 미치는 것을
    부수 효과라고 하는데, 순수함수는 부수 효과가 없는 함수이다.

    함수형 프로그래밍에서는 객체의 값을 조금 다른 방법으로 변형해 나간다.
    원래 있는 값은 그대로 두고 복사, 새로운 클론을 만들어서 원래의 값이
    변형된 새로운 값을 리턴하는 식이다.

함수형 프로그래밍 : 부수 효과를 없애고 순수 함수를 만들어 모듈화 수준을 높이는 프로그래밍 패러다임

  * 부수 효과 = 외부의 상태를 변경하는 것 또는 함수로 들어온 인자의 상태를 직접 변경하는 것

  * 순수 함수 = 부수효과가 없는 함수 즉, 어떤 함수에 동일한 인자를 주었을 때 항상 같은 값을 리턴하는 함수

                + 외부의 상태를 변경하지 않는 함수

  모듈화 수준이 높으면 재사용성이 높고 좋은 프로그래밍이라 할 수 있다.
  => 궁극적으로 평가 시점이 무관하다는 특성으로 효율적인 로직을 구성하는 것이 함수형 프로그래밍 패러다임이다.

  "순수 함수는 평가 시점이 중요하지 않다.(=언제, 어디서든 무관)"

  "순수 함수는 외부의 상태를 변경하지 않으면서 동일한 인자에 대해 항상 똑같은 값을 리턴하는 함수다."

  참고: https://jeong-pro.tistory.com/23


일급 함수 ( first-class function )

 - 값으로 담을 수 있는 함수이다.
 - 함수를 1급 객체로 다룰 수 있는 프로그래밍 언어의 성질, 그러한 함수
 - 변수에 할당, 전달 가능

일급 객체 ( First-class citizen )

 - 직관적으로 설명하자면, Function 이면서 Class의 성질인 지닌 객체 또는 Class이면서 
   Function의 성질을 지닌 객체를 First-Class Citizens 라고 이해할 수 있다.
   JavaScript 에서 Function에 Property를 줄 수 있는 것이 대표적인 예이다.

배경 지식

 first class citizen이란 자유롭게 거주하고 일 할 수 있고, 출입국의 자유를 가지며, 
 투표의 자유를 가지는 시민을 의미한다면, second class citizen이란 시민 또는 
 합법적 거주자이지만 시민권 및 사회 경제적 기회가 제한되어있는 시민을 의미합니다. 
 예를 들면, 19세기 초 참정권을 가진 남성이 first class citizen이라면, 
 참정권을 가지지 못했던 여성은 second class citizen이라고 할 수 있는 것이죠.

 프로그래밍 세계에서도 비슷한 개념이 존재합니다.
 프로그래밍 언어 디자인에서, 특정 언어의 first-class citizens은
 (first-class type, 또는 first-class object, 또는 first-class value 라고도 합니다.)
 보통 다른 객체들에게 적용 가능한 연산을 모두 지원하는 객체를 말합니다. 
 이러한 연산에는 보통 매개변수로 전달되고, 함수에서 반환되고 수정되고 변수에 할당되는 
 작업이 포함됩니다.

 즉! 프로그래밍 언어에서 type을 전달, 반환 및 할당 할 수 있는 경우 해당 type을 
 1급 객체로 간주됩니다. Javascript에서 함수를 반환할 수 있을 뿐만 아니라 
 함수를 받을 수 있는 함수를 만들수 있으니 함수형 프로그래밍으로 Javascript가 
 인기가 있어지는 이유이도 합니다. 그래서 하나 이상의 함수를 인수로 받거나 
 함수를 반환하는 고차 함수를 만들 수 있어요.

 참고 : https://medium.com/@soeunlee/javascript%EC%97%90%EC%84%9C-%EC%99%9C-%ED%95%A8%EC%88%98%EA%B0%80-1%EA%B8%89-%EA%B0%9D%EC%B2%B4%EC%9D%BC%EA%B9%8C%EC%9A%94-cc6bd2a9ecac

Higher-order-function(고차함수)

  Higher-order-function 이란 2가지 중 하나이상을 만족하는 함수를 말합니다.

  함수를 파라미터로 전달 받는 함수
  함수를 리턴하는 함수

일급 함수의 이러한 특징들을 이용하여
순수 함수들과 조합성을 높여나가는 것이 함수형 프로그래밍이다.

언제 평가해도 상관없는 순수함수들을 많이 만들고,
그 순수 함수들을 값으로 들고 다니면서 필요한 시점에
평가를 하는 방식이 함수형 프로그래밍이다.


MDN 클로저 정의

  “A closure is the combination of a function and the lexical environment within which that function was declared.”
  클로저는 함수와 그 함수가 선언됐을 때의 렉시컬 환경(Lexical environment)과의 조합이다.

  위 정의에서 말하는 “함수”란 반환된 내부함수를 의미하고 
  “그 함수가 선언될 때의 렉시컬 환경(Lexical environment)”란 내부 함수가
  선언됐을 때의 스코프를 의미한다. 즉, 클로저는 반환된 내부함수가 
  자신이 선언됐을 때의 환경(Lexical environment)인 스코프를 기억하여 
  자신이 선언됐을 때의 환경(스코프) 밖에서 호출되어도 
  그 환경(스코프)에 접근할 수 있는 함수를 말한다. 
  이를 조금 더 간단히 말하면 클로저는 자신이 생성될 때의 
  환경(Lexical environment)을 기억하는 함수다라고 말할 수 있겠다.

클로저가 사용되는 상황

  클로저가 가장 유용하게 사용되는 상황은 현재 상태를 기억하고 변경된 최신 상태를 유지하는 것.
  변수의 값은 누군가에 의해 언제든지 변경될 수 있어 오류 발생의 근본적 원인이 될 수 있다.
  상태 변경이나 가변(mutable) 데이터를 피하고 불변성(Immutability)을 지향하는 
  함수형 프로그래밍에서 부수 효과(Side effect)를 최대한 억제하여 오류를 피하고 
  프로그램의 안정성을 높이기 위해 클로저는 적극적으로 사용된다.

요즘 개발 이야기

  * 재미 / 실시간 : 라이브 방송, 실시간 댓글, 협업, 메신저 등등.. 요즘 트렌드임.
    ex) keynote

  * 독창성 / 완성도 : 애니메이션, 무한 스크롤, 벽돌 등등.. + ui / ux 

  * 동시성 : 

      비동기 I/O, 등등등.. 많은 사람들이 동시에 접속하는 것에 대한 대비가 필요하다.

  * 반응성 / 고가용성(죽지않는 서비스) : 

      서비스가 빨라야 한다, 죽지 않아야 한다. ELB, Auto Scaling 등등 
      사용자 급증에 대한 대비 필요

  * 대용량 / 정확성 / 병렬성 : 
  
      MapReduce, Clojure Reducers 등.. 많은 양의 데이터들을 빠르게 병렬 처리

  * 복잡도 / MSA :

      많아지고 세밀해지는 Tools - 도구들 
      독창성이 요구되다 보니
      작은 도구들을 모아서 하나의 소프트웨어를 만드는 형태로 발전했다.

  *** 그렇지만 타협할 수 없는 생산성 ***

  좋아지는 하드웨어 성능, 좋아지는 컴파일러 -> 함수형 프로그래밍이 스멀스멀 다가오는 중.

  동시성 + 병렬성, 분산이나 리액티브한 환경에 함수형 프로그래밍이 많이 채택되고 있다.


* 함수형 프로그래밍의 또 다른 정의.

  - 언어 자체를 함수처럼 여기도록 만들고, 이러한 함수 개념을 가장 우선순위에 놓는다.

* 함수형 사고방식

  - 문제의 해결 방법을 동사(함수)들로 구성(조합)하는 것이다.

    마이클 포거스, 클로저 플로그래밍의 즐거움에서... 클로저 진영의 핵심적인 기여를 한
    자바스크립트 핵심 개발자임.

    동사들을 통해서 구성해나가는 것! 함수형 프로그래밍!

* 그렇다면 함수를 우선으로 놓는다는 것은 무엇인가??

  단순하게 말하자면
  함수가 먼저 나오면 함수형 프로그래밍.
  객체가 먼저 나오면 객체지향 프로그래밍이다.

  객체지향 : 데이터를 먼저 디자인하고 데이터에 맞는 메서드를 만드는 식으로 프로그래밍한다.
  함수형 : 함수를 만들고 그 함수에 맞게 데이터 세트를 구성하는 식으로 프로그래밍한다.

---------------------------------------------------------------------------

필터와 같은 함수를 응용형 함수라고 한다. 함수를 인자로 받음.
함수가 함수를 받아서 원하는 시점에 해당 함수가 알고 있는 인자를
적용하는 것을 응용형 프로그래밍, 또는 적용형 프로그래밍이라고 한다.

* 원하는 시점에 평가한다는 것!!!
    
고차함수라고도 부른다. 함수를 인자로 받거나 함수를 리턴하거나
함수로 받은 인자를 함수내에서 실행하는 함수들을 고차함수라고 부른다.

함수형 프로그래밍은 추상화의 단위에 함수를 이용한다.
ex) 어떤 조건일 때 필터링 할지를 함수에게 위임한다.

필터함수는 리스트 인자랑 조건이 위임된 인자인 함수를 넘기고 새로운 리스트를 리턴하는 식으로 작동하고,
맵함수는 리스트 인자랑 맵핑할, 즉 수집할 데이터 키를 설정하는 조건 함수를 넘기고 맵핑되는 값들을 리턴하는 식으로
작동된다.

---------------------------------------------------------------------------

* 함수가 먼저 나오는 프로그래밍은 데이터가 있기 전부터 함수가 있고,
  데이터가 먼저 나오는 프로그래밍은 데이터가 있어야 메서드가 생긴다.

  객체지향은 평가의 순서가 굉장히 중요하게 된다!!! 해당하는 객체가 생겨야 기능을 수행할 수 있게됨!!

  함수 자체는 혼자 먼저 존재하기 때문에 데이터가 생기지 않아도 함수가 이미 존재하기 떄문에 평가 시점이 훨씬 유연해진다.
  여러가지 조합을 (조합성이 좋음) 만들 수 있다!!! 메서드 보다 다형성면에서, 실용성 면에서 좀더 좋은 점들이 있음!!

---------------------------------------------------------------------------

  함수형 프로그래밍에서는 함수가 어떤 역할을 하는지에 따라 이름을 갖는 것이 중요하다.
  단순히 역할을 수행한 다음에 돌려주는 콜백함수가 아닌, predi, iter, mapper 등 각각의 역할에 맞는 보조함수의 이름을
  따로 불러주는 것이 좋다.
  내부 다형성을 가지는 predi, iter, mapper 보조함수들.

  역할들을 책임지는 보조함수들!! 단순한 콜백이라고 보지말고 각각의 역할에 맞는 이름을 따로 불러주자!!
  조건이라던지 반복이라던지 역할을 책임지는 함수들임. 얘네들한테 위임하잖아.

  내부에서 데이터를 살펴보는게 아니라 역할을 위임하기 때문에 
  데이터형에 있어서 굉장히 자유롭고, 다형성을 높이는데 유리합니다.

  외부 다형성을 가지는 애들은 array_like, arguments, document.querySelectorAll

---------------------------------------------------------------------------

커링이란?

  함수와 인자를 다루는 기법이다.
  필요한 인자가 모두 채워지면 함수 본체를 실행하는 기법이다.

  자바스크립트에서는 커링이 지원되지 않지만, 일급함수가 지원되고 평가시점을 마음대로 다룰 수 있기 때문에
  커링과 같은 기법을 얼마든지 구현할 수 있다.

curryr

  curryr 을 통해 인자의 순서를 뒤집어서 평가할 수 있다.

유사배열 예제

  var a = document.querySelectorAll('*');

Array 에 slice를 적용 시킬 수 있는 방법??

  배열의 프로토타입에 있는 함수인 slice를 빌려쓴다!! (join, concat 메소드도 이 방식으로 사용 가능.)

  var slice = Array.prototype.slice;

  slice.call(a, 2);

  ArrayLike 객체가 와도 잘라줄 수 있다는 점!

_rest 함수

  리스트를 받고 자를 만큼의, 제외시킬 만큼의 넘버를 받는다.
  slice 보다 더 나아가서 arraylike 까지 잘라주는 함수이다.

ArrayLike

  뜻을 해석 하자면 배열 좋아가 아닌 배열과 유사한. 즉 배열 같은 오브젝트 입니다.
  반드시 length 프로퍼티가 정의되어 있어야 하며, key를 index number로 지정하여 사용할 수 있습니다.

파이프

  파이프는 함수들을 인자로 받아서 이 함수들을 연속으로 실행해주는 함수이다.
  연속 실행할 준비가 된 함수들을 리턴하는 함수이다.

  파이프는 결국엔 리듀스이다.
  파이프 보다 추상화된 함수가 리듀스임.

  * 함수들이라는 배열을 통해서 인자를 연속적으로 적용, 최종 결과로 축약하는 함수임.

call, apply, bind

  call은 보통 함수와 똑같이 인자를 넣고, apply는 인자를 하나로 묶어 배열로 만들어 넣음.

  실행 컨텍스트에서 this는 기본적으로 window이다.
  이 window를 다른 것으로 바꿀 수 있다.
  call, apply, bind에서 첫 번째 인자로 다른 것을 넣어주는 게 this를 바꾸는 방법이다.

  bind 함수?
  
    bind 함수는 함수가 가리키는 this만 바꾸고 호출하지는 않음.

    ex) 

      var obj = {
        string: 'zero',
        yell: function() {
          alert(this.string);
        }
      };
      var obj2 = {
        string: 'what?'
      };
      var yell2 = obj.yell.bind(obj2);
      yell2(); // 'what?'

      obj.yell.bind(obj2) 했더니 yell 함수의 this가 obj2로 바뀌었습니다. 
      즉 call이나 apply와 비슷하지만 호출은 하지 않지 않고 함수만 반환하는 겁니다. 
      call(this, 1, 2, 3)은 bind(this)(1, 2, 3)과 같죠.

_go

  go는 pipe의 즉시실행 버젼이라고 보면 된다.

pipe 나 go 함수는 코드를 보다 표현력 좋게 변화시킬 수 있다.

명령형으로 작성했던 코드들이 선언위주의 깔끔한 함수형으로 변화되는 과정이 느껴지나욤???

============================

컬렉션

  컬렉션은 돌림직한 데이터들을 다루는 것을 말함.

  컬렉션 중심 프로그래밍은 함수형 프로그래밍에서 빛을 발한다.
  실무에서 피할 수 없는 프로그래밍이다.

  컬렉션을 잘 다루는 함수 세트들을 잘 구성해 나가는 것을
  컬렉션 중심 프로그래밍이라고 합니다.
  주로 map, filter, reduce 등이 있어요.


컬렉션 중심 프로그래밍의 4가지 유형과 함수

  가장 맨 앞에 있는 애들은 대표 함수들임. (추상화 레벨이 높음)
  맨 앞에 있는 애들로 뒤에 있는 애들을 만들 수 있음.
  (map 으로 values, pluck / filter로 reject 등..)
  대표함수들을 통해 유형별로 특화 함수들을 만들 수 있다!
  map, filter, find, reduce 등의 
  고차 함수들을 중심으로 한프로그래밍입니다!

  1. 수집하기 - map, values, pluck 등
  2. 거르기 - filter, reject, compact, without 등
  3. 찾아내기 - find, some, every 등
  4. 접기 - reduce, min, max, group_by, count_by

  내가 만들고자 하는 어떤 문제를 어떤 함수로 해결해 나가는 지
  기준을 잡는 연습 또는 상상이 필요.

  함수들을 언제 쓰는지 명확히 알자!

  값을 찾아낼 때는 find, 집계를 할 때는 reduce,
  걸러낼 때는 filter 등등..

filter에서 쓰이는 두번째 인자 predi 뜻.

  프로그래밍 언어에서 사용하는 predicate는 
  서술어라기 보다는 논리에서 사용하는 
  긍정 또는 부정의 입언을 하는 개념으로 사용한다. true / false를 판단할 수 있는 식이나 boolean 값을 리턴하는 함수를 술어(predicate)라고 한다.

  predicate 뜻.

    - 술어[述語]
    - [논리]논리의 판단·명제에서, 주사(主辭)에 대하여 긍정 또는 부정의 입언(立言)을 하는 개념.
    - [언어] 같은 말 : 서술어.


filter에서 파생된 reject

  평가되었을 때,
  filter가 true로 된 값들을 꺼낸다면,
  reject는 true로 평가된 값들을 제외시킵니다.

  _negate라는 함수로 filter에서 reject를 만들었어요!


함수형 프로그래밍

  평가 시점들을 다루거나, 함수가 함수를 대신 실행한다던지,
  함수가 함수를 리턴하거나, 함수를 값으로 다룬다거나,
  인자로 받은 함수를 실행한 다음에 결과를 반대로 바꾼다음 리턴한다던지..
  이런식으로 함수의 응용과 조합을 강조하는 것이 함수형 프로그래밍이다.

  복잡한 기능을 가진 뚱뚱한 함수를 열 개 만드는 것보다
  서로다른 가벼운 함수를 만드는 것이 프로그래밍을 하면서
  더 유리하다.

  굉장히 다양하게 함수들을 조합하면서 
  약간만 변경된 함수들을 많이 만드는게 함수 진영의 목표임.

  _identity 라는 정말 아무것도 아닌 것 같은 함수가.. 
  실용적이고 간결, 조합성 증가에 이렇게나 좋다니!
  
  _negate라는 함수로 filter에서 reject를 만들었어요!
  굉장히 실용적이고 아름답군요!!